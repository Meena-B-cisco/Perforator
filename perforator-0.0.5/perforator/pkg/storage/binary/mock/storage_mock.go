// Code generated by MockGen. DO NOT EDIT.
// Source: models.go
//
// Generated by this command:
//
//	mockgen -source models.go -destination ./mock/storage_mock.go
//

// Package mock_binary is a generated GoMock package.
package mock_binary

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	binary "github.com/yandex/perforator/perforator/pkg/storage/binary"
	binarymeta "github.com/yandex/perforator/perforator/pkg/storage/binary/meta"
	storage "github.com/yandex/perforator/perforator/pkg/storage/storage"
	util "github.com/yandex/perforator/perforator/pkg/storage/util"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionalWriter is a mock of TransactionalWriter interface.
type MockTransactionalWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionalWriterMockRecorder
}

// MockTransactionalWriterMockRecorder is the mock recorder for MockTransactionalWriter.
type MockTransactionalWriterMockRecorder struct {
	mock *MockTransactionalWriter
}

// NewMockTransactionalWriter creates a new mock instance.
func NewMockTransactionalWriter(ctrl *gomock.Controller) *MockTransactionalWriter {
	mock := &MockTransactionalWriter{ctrl: ctrl}
	mock.recorder = &MockTransactionalWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionalWriter) EXPECT() *MockTransactionalWriterMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockTransactionalWriter) Abort(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abort", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Abort indicates an expected call of Abort.
func (mr *MockTransactionalWriterMockRecorder) Abort(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockTransactionalWriter)(nil).Abort), ctx)
}

// Commit mocks base method.
func (m *MockTransactionalWriter) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionalWriterMockRecorder) Commit(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransactionalWriter)(nil).Commit), ctx)
}

// Write mocks base method.
func (m *MockTransactionalWriter) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockTransactionalWriterMockRecorder) Write(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTransactionalWriter)(nil).Write), p)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CollectExpired mocks base method.
func (m *MockStorage) CollectExpired(ctx context.Context, ttl time.Duration, pagination *util.Pagination, shardParams *storage.ShardParams) ([]*storage.ObjectMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectExpired", ctx, ttl, pagination, shardParams)
	ret0, _ := ret[0].([]*storage.ObjectMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectExpired indicates an expected call of CollectExpired.
func (mr *MockStorageMockRecorder) CollectExpired(ctx, ttl, pagination, shardParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectExpired", reflect.TypeOf((*MockStorage)(nil).CollectExpired), ctx, ttl, pagination, shardParams)
}

// Delete mocks base method.
func (m *MockStorage) Delete(ctx context.Context, IDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, IDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageMockRecorder) Delete(ctx, IDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage)(nil).Delete), ctx, IDs)
}

// GetBinaries mocks base method.
func (m *MockStorage) GetBinaries(ctx context.Context, buildIDs []string) ([]*binarymeta.BinaryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBinaries", ctx, buildIDs)
	ret0, _ := ret[0].([]*binarymeta.BinaryMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBinaries indicates an expected call of GetBinaries.
func (mr *MockStorageMockRecorder) GetBinaries(ctx, buildIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBinaries", reflect.TypeOf((*MockStorage)(nil).GetBinaries), ctx, buildIDs)
}

// LoadBinary mocks base method.
func (m *MockStorage) LoadBinary(ctx context.Context, buildID string, writer io.WriterAt) (*binarymeta.BinaryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadBinary", ctx, buildID, writer)
	ret0, _ := ret[0].(*binarymeta.BinaryMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadBinary indicates an expected call of LoadBinary.
func (mr *MockStorageMockRecorder) LoadBinary(ctx, buildID, writer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBinary", reflect.TypeOf((*MockStorage)(nil).LoadBinary), ctx, buildID, writer)
}

// StoreBinary mocks base method.
func (m *MockStorage) StoreBinary(ctx context.Context, binaryMeta *binarymeta.BinaryMeta) (binary.TransactionalWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBinary", ctx, binaryMeta)
	ret0, _ := ret[0].(binary.TransactionalWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreBinary indicates an expected call of StoreBinary.
func (mr *MockStorageMockRecorder) StoreBinary(ctx, binaryMeta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBinary", reflect.TypeOf((*MockStorage)(nil).StoreBinary), ctx, binaryMeta)
}
